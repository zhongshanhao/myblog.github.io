<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python机器学习--感知机</title>
      <link href="/2019/10/03/ganzhiji/"/>
      <url>/2019/10/03/ganzhiji/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from matplotlib.colors import ListedColormap</span><br><span class="line"></span><br><span class="line">class Perceptron(object):</span><br><span class="line">    def __init__(self, eta=0.01, n_iter=50, random_state=1):        </span><br><span class="line">        self.eta = eta        </span><br><span class="line">        self.n_iter = n_iter        </span><br><span class="line">        self.random_state = random_state</span><br><span class="line">    </span><br><span class="line">    def fit(self, X, y):</span><br><span class="line">        rgen = np.random.RandomState(self.random_state)        </span><br><span class="line">        self.w_ = rgen.normal(loc=0.0, scale=0.01,size=1 + X.shape[1])        </span><br><span class="line">        self.errors_ = []</span><br><span class="line">        for _ in range(self.n_iter):            </span><br><span class="line">            errors = 0            </span><br><span class="line">            for xi, target in zip(X, y):                </span><br><span class="line">                update = self.eta * (target - self.predict(xi))                </span><br><span class="line">                self.w_[1:] += update * xi                </span><br><span class="line">                self.w_[0] += update                </span><br><span class="line">                errors += int(update != 0.0)            </span><br><span class="line">            self.errors_.append(errors)        </span><br><span class="line">        return self</span><br><span class="line">    </span><br><span class="line">    def net_input(self, X):        </span><br><span class="line">        &quot;&quot;&quot;Calculate net input&quot;&quot;&quot;        </span><br><span class="line">        return np.dot(X, self.w_[1:]) + self.w_[0]</span><br><span class="line">    </span><br><span class="line">    def predict(self, X):        </span><br><span class="line">        &quot;&quot;&quot;Return class label after unit step&quot;&quot;&quot;        </span><br><span class="line">        return np.where(self.net_input(X) &gt;= 0.0, 1, -1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'https://archive.ics.uci.edu/ml/'</span> </span><br><span class="line"><span class="meta">... </span>             <span class="string">'machine-learning-databases/iris/iris.data'</span>, </span><br><span class="line"><span class="meta">... </span>              header=<span class="literal">None</span>) </span><br><span class="line">df.tail()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>    </tr>  </thead>  <tbody>    <tr>      <th>145</th>      <td>6.7</td>      <td>3.0</td>      <td>5.2</td>      <td>2.3</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>146</th>      <td>6.3</td>      <td>2.5</td>      <td>5.0</td>      <td>1.9</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>147</th>      <td>6.5</td>      <td>3.0</td>      <td>5.2</td>      <td>2.0</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>148</th>      <td>6.2</td>      <td>3.4</td>      <td>5.4</td>      <td>2.3</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>149</th>      <td>5.9</td>      <td>3.0</td>      <td>5.1</td>      <td>1.8</td>      <td>Iris-virginica</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># select setosa and versicolor </span></span><br><span class="line">y = df.iloc[<span class="number">0</span>:<span class="number">100</span>, <span class="number">4</span>].values </span><br><span class="line">y = np.where(y == <span class="string">'Iris-setosa'</span>, <span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract sepal length and petal length </span></span><br><span class="line">X = df.iloc[<span class="number">0</span>:<span class="number">100</span>, [<span class="number">0</span>, <span class="number">2</span>]].values</span><br><span class="line"><span class="comment"># plot data </span></span><br><span class="line">plt.scatter(X[:<span class="number">50</span>, <span class="number">0</span>], X[:<span class="number">50</span>, <span class="number">1</span>], label=<span class="string">'setosa'</span>) </span><br><span class="line">plt.scatter(X[<span class="number">50</span>:<span class="number">100</span>, <span class="number">0</span>], X[<span class="number">50</span>:<span class="number">100</span>, <span class="number">1</span>],marker=<span class="string">'x'</span>,label=<span class="string">'versicolor'</span>)  </span><br><span class="line">plt.xlabel(<span class="string">'sepal length [cm]'</span>) </span><br><span class="line">plt.ylabel(<span class="string">'petal length [cm]'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/700703/d147555495de8c6b.png" alt="Markdown"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ppn = Perceptron(eta=<span class="number">0.1</span>,n_iter=<span class="number">10</span>)</span><br><span class="line">ppn.fit(X, y)</span><br><span class="line">plt.plot(range(<span class="number">1</span>, len(ppn.errors_) + <span class="number">1</span>), ppn.errors_, marker=<span class="string">'o'</span>) </span><br><span class="line">plt.xlabel(<span class="string">'Epochs'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Number of updates'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/700703/0f0a93745808decc.png" alt="Markdown"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_regions</span><span class="params">(X, y, classifier, resolution=<span class="number">0.02</span>)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># setup marker generator and color map    </span></span><br><span class="line">    markers = (<span class="string">'s'</span>, <span class="string">'x'</span>, <span class="string">'o'</span>, <span class="string">'^'</span>, <span class="string">'v'</span>)    </span><br><span class="line">    colors = (<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'lightgreen'</span>, <span class="string">'gray'</span>, <span class="string">'cyan'</span>)    </span><br><span class="line">    cmap = ListedColormap(colors[:len(np.unique(y))])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plot the decision surface    </span></span><br><span class="line">    x1_min, x1_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span>    </span><br><span class="line">    x2_min, x2_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span>    </span><br><span class="line">    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),                           </span><br><span class="line">                           np.arange(x2_min, x2_max, resolution))    </span><br><span class="line">    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)    </span><br><span class="line">    Z = Z.reshape(xx1.shape)    </span><br><span class="line">    plt.contourf(xx1, xx2, Z, alpha=<span class="number">0.3</span>, cmap=cmap)    </span><br><span class="line">    plt.xlim(xx1.min(), xx1.max())    </span><br><span class="line">    plt.ylim(xx2.min(), xx2.max())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plot class samples    </span></span><br><span class="line">    <span class="keyword">for</span> idx, cl <span class="keyword">in</span> enumerate(np.unique(y)):        </span><br><span class="line">        plt.scatter(x=X[y == cl, <span class="number">0</span>],                    </span><br><span class="line">                    y=X[y == cl, <span class="number">1</span>],                    </span><br><span class="line">                    alpha=<span class="number">0.8</span>,                    </span><br><span class="line">                    c=colors[idx],                    </span><br><span class="line">                    marker=markers[idx],                    </span><br><span class="line">                    label=cl,                    </span><br><span class="line">                    edgecolor=<span class="string">'black'</span>)</span><br><span class="line"></span><br><span class="line">plot_decision_regions(X, y, classifier=ppn)</span><br><span class="line">plt.xlabel(<span class="string">'sepal length [cm]'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal length [cm]'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/700703/15a977e327e47b82.png" alt="Markdown"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>numpy_矩阵切片</title>
      <link href="/2019/10/03/numpy-array/"/>
      <url>/2019/10/03/numpy-array/</url>
      
        <content type="html"><![CDATA[<p>和python列表一样，numpy库中array也有着可切片的特性，这大大方便了我们对矩阵的可操作性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">12</span>)</span><br><span class="line">a.shape = (<span class="number">3</span>,<span class="number">4</span>)   <span class="comment">#同写法a = a.reshape(3,4)</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>首先我们现创建一个3*4的矩阵，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]]</span><br></pre></td></tr></table></figure><p>可通过a[x,y]选择第x+1行第y+1列的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a[<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">#选择矩阵第3行第4列</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><p>通过以下方法可对矩阵进行切割。</p><p>a[:,y]中“：”表示选择所有行，y表示选择第y+1列，a[:,1]表示选择矩阵a第2列的所有行，也就是[1 5 9]；</p><p>a[1,:]表示选择矩阵a第2行的所有列，也就是[4 5 6 7]。</p><p>a[:,:2]表示选择矩阵a第1和第2列的所有行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(a[:,<span class="number">1</span>])  <span class="comment">#选择矩阵第二列 </span></span><br><span class="line">print(a[<span class="number">1</span>,:])  <span class="comment">#选择矩阵第二行  </span></span><br><span class="line">print(a[:,:<span class="number">2</span>]) <span class="comment">#选择矩阵第一和第二列</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1 5 9]</span><br><span class="line">[4 5 6 7]</span><br><span class="line">[[0 1]</span><br><span class="line"> [4 5]</span><br><span class="line"> [8 9]]</span><br></pre></td></tr></table></figure><p>选择矩阵第2，3行和第2，3列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a[1:,1:3])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[ 5  6]</span><br><span class="line"> [ 9 10]]</span><br></pre></td></tr></table></figure><p>用ravel()方法可将矩阵按行展开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a.ravel())<span class="comment">#将矩阵转换成列表</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 0  1  2  3  4  5  6  7  8  9 10 11]</span><br></pre></td></tr></table></figure><p>方法np.where(condition,x1,x2)，矩阵元素满足condition则选择用x1替换，否则用x2替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = np.array([<span class="string">'one'</span>,<span class="string">'zreo'</span>,<span class="string">'one'</span>])</span><br><span class="line">y = np.where(y == <span class="string">'one'</span>,<span class="number">1</span>,<span class="number">0</span>) <span class="comment">#满足条件选1，不满足选0</span></span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 0 1]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在博客之前</title>
      <link href="/2019/10/02/whyblog/"/>
      <url>/2019/10/02/whyblog/</url>
      
        <content type="html"><![CDATA[<h2 id="Why-Blog？"><a href="#Why-Blog？" class="headerlink" title="Why Blog？"></a>Why Blog？</h2><blockquote><p>记录日常学习笔记。</p><p>方便快速复习已经学过的知识。</p><p>增加写文能力。</p><p>希望能帮助到其他人。</p></blockquote><h2 id="工匠精神"><a href="#工匠精神" class="headerlink" title="工匠精神"></a>工匠精神</h2><p>当今社会，经济和技术高速发展，身处于这样一个时代的我们难免有些浮躁。我所推崇的”工匠精神“，是一种刻骨钻研、追求创新的精神。我所希望的是，任何一种职业，不管在学习还是工作中，都应该像一名工匠一样，尽自己所能把事情做好，做精。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
